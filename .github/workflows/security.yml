name: Security

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  dependency-security:
    name: Dependency Security Scan
    runs-on: macos-14
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: '6.1'
        
    - name: Audit Swift Package Dependencies
      run: |
        # Generate dependency list
        swift package show-dependencies --format json > dependencies.json
        
        # Check for any known vulnerabilities in Swift packages
        # This is a basic check - in a real scenario you'd want to use
        # a more comprehensive tool
        echo "Checking Swift package dependencies..."
        
        if [ -f dependencies.json ]; then
          # Parse dependencies and check for known issues
          jq -r '.dependencies[] | .name + " " + .version' dependencies.json || true
          echo "Dependencies audit completed successfully"
        fi
        
    - name: Upload Dependency Information
      uses: actions/upload-artifact@v4
      with:
        name: dependencies-${{ github.sha }}
        path: dependencies.json
        retention-days: 30
        
  code-security:
    name: Code Security Scan
    runs-on: macos-14
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: CodeQL Initialize
      uses: github/codeql-action/init@v3
      with:
        languages: swift
        
    - name: Setup Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: '6.1'
        
    - name: Build for Analysis
      run: |
        swift build -c release
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      
  secret-scan:
    name: Secret Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
        
  license-compliance:
    name: License Compliance
    runs-on: macos-14
    if: false  # Disabled until FOSSA_API_KEY is configured
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: '6.1'
        
    - name: Basic License Check
      run: |
        # Check for license files
        echo "Checking for license information..."
        
        # Look for license files
        find . -name "LICENSE*" -o -name "COPYING*" -o -name "COPYRIGHT*" | head -10
        
        # Check Package.swift for license info
        if [ -f Package.swift ]; then
          echo "Package.swift found"
          # Could add license parsing logic here
        fi
        
        # List dependencies
        swift package show-dependencies --format json > dependencies.json
        echo "Dependencies check completed"