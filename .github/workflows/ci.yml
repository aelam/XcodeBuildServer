name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  SWIFT_VERSION: 6.1
  XCODE_VERSION: 16.2

jobs:
  build-and-test:
    name: Build and Test
    runs-on: macos-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ env.XCODE_VERSION }}
        
    - name: Setup Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: ${{ env.SWIFT_VERSION }}
    
    - name: Cache Swift Package Manager
      uses: actions/cache@v4
      with:
        path: |
          .build
          ~/.cache/org.swift.swiftpm
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
    
    - name: Resolve Dependencies
      run: swift package resolve

    - name: Build
      run: swift build -v
      
    - name: Run Tests
      run: |
        echo "CI environment variable: $CI"
        xcodebuild -version
        echo "Running tests in CI mode..."
        swift test --enable-code-coverage
      env:
        CI: true

    - name: Install LLVM
      run: brew install llvm
      
    - name: Generate coverage report
      run: |
        # Use Homebrew LLVM tools for better version compatibility
        LLVM_COV="/opt/homebrew/opt/llvm/bin/llvm-cov"
        LLVM_PROFDATA="/opt/homebrew/opt/llvm/bin/llvm-profdata"
        
        TEST_BINARY=$(find .build -path "*/Contents/MacOS/*PackageTests" -type f -perm +111 | head -1)
        
        # Try merging profraw files with newer LLVM tools
        if find .build -name "*.profraw" | head -1 >/dev/null 2>&1; then
          echo "Merging profraw files with Homebrew LLVM..."
          if $LLVM_PROFDATA merge -sparse .build/*/debug/codecov/*.profraw -o coverage.profdata 2>/dev/null; then
            $LLVM_COV export "$TEST_BINARY" -instr-profile=coverage.profdata -format=lcov > coverage.info
            echo "✅ Generated coverage using Homebrew LLVM tools"
          else
            echo "⚠️ Failed to merge profraw files"
            echo "# No coverage data available" > coverage.info
          fi
        else
          echo "⚠️ No profraw files found"
          echo "# No coverage data available" > coverage.info
        fi
        
    - name: Upload to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: coverage.info
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true
        
  lint:
    name: Code Quality
    runs-on: macos-14
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ env.XCODE_VERSION }}
        
    - name: Setup Swift
      uses: swift-actions/setup-swift@v2
      with:
        swift-version: ${{ env.SWIFT_VERSION }}
      
    - name: Install SwiftLint
      run: |
        brew install swiftlint
        
    - name: Run SwiftLint
      run: |
        swiftlint --strict --reporter github-actions-logging
        
    - name: Install SwiftFormat  
      run: |
        brew install swiftformat
        
    - name: Check Swift Format
      run: |
        swiftformat . --lint-only

  security-scan:
    name: Security Scan
    runs-on: macos-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Install Semgrep
      run: |
        brew install semgrep
        
    - name: Run Semgrep Security Scan
      run: |
        semgrep --config=p/swift --config=p/security-audit --config=p/secrets . || echo "Semgrep scan completed with findings"
        
    - name: Check for hardcoded secrets
      run: |
        echo "Checking for potential secrets..."
        
        SECRETS_FOUND=false
        
        if grep -ri "api[_-]\?key\s*[:=]\s*['\"][^'\"]*['\"]" Sources/ Tests/ --include="*.swift" 2>/dev/null; then
          echo "::warning::Potential API key pattern found"
          SECRETS_FOUND=true
        fi
        
        if grep -ri "token\s*[:=]\s*['\"][^'\"]*['\"]" Sources/ Tests/ --include="*.swift" 2>/dev/null; then
          echo "::warning::Potential token pattern found"
          SECRETS_FOUND=true
        fi
        
        if grep -ri "password\s*[:=]\s*['\"][^'\"]*['\"]" Sources/ Tests/ --include="*.swift" 2>/dev/null; then
          echo "::warning::Potential password pattern found"
          SECRETS_FOUND=true
        fi
        
        if [ "$SECRETS_FOUND" = false ]; then
          echo "✅ No obvious secrets found"
        fi
